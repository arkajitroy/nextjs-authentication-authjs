// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "mongodb"
  url  	    = env("DATABASE_URL")
}

enum UserRole{
  ADMIN
  USER
}


model User {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  accounts             Account[]
  role                 UserRole              @default(USER)
  isTwoFactorEnabled   Boolean               @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}



model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  // @@index([provider, providerAccountId], name: "provider_account_unique_index") // Index for unique constraint
}


// * for email verifiication (64)
model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expires   DateTime

  // @@index([email, token], name: "email_token_unique_index") // Index instead of unique constraint
}

// * for password reset 
model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expires   DateTime

  // @@index([email, token], name: "email_token_reset_unique_index") // Index instead of unique constraint
}

model TwoFactorToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expires   DateTime

  // @@index([email, token], name: "email_token_2fa_unique_index") // Index instead of unique constraint
}

model TwoFactorConfirmation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])

  // @@index([userId], name: "user_unique_index") // Index for unique constraint
}